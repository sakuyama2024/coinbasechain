---
# Simplified Ansible Playbook: Deploy CoinbaseChain using Docker CLI
# No Python dependencies required - uses direct shell commands

- name: Deploy CoinbaseChain Docker Network (Simple)
  hosts: coinbasechain_nodes
  become: true

  vars:
    container_name: "coinbasechain-{{ coinbasechain_network }}"

  tasks:
    # =========================================================================
    # 1. Transfer project files
    # =========================================================================
    - name: Create temporary build directory
      file:
        path: /tmp/coinbasechain-build
        state: directory
        mode: '0755'
      tags: [build]

    - name: Copy project files to server
      synchronize:
        src: "{{ playbook_dir }}/../../"
        dest: /tmp/coinbasechain-build/
        delete: yes
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=build"
          - "--exclude=build_*"
          - "--exclude=.vscode"
          - "--exclude=*.o"
          - "--exclude=*.a"
          - "--exclude=deploy/ansible"
      tags: [build]

    # =========================================================================
    # 2. Build Docker image
    # =========================================================================
    - name: Build Docker image
      shell: |
        cd /tmp/coinbasechain-build
        docker build -t coinbasechain:latest -f deploy/docker/Dockerfile .
      tags: [build]

    - name: Clean up build directory
      file:
        path: /tmp/coinbasechain-build
        state: absent
      tags: [build]

    # =========================================================================
    # 3. Deploy Container
    # =========================================================================
    - name: Create data directory
      file:
        path: "{{ docker_data_dir }}"
        state: directory
        mode: '0755'
      tags: [deploy]

    - name: Set data directory ownership for container user
      file:
        path: "{{ docker_data_dir }}"
        owner: 1000
        group: 1000
        mode: '0755'
        recurse: yes
        state: directory
      tags: [deploy]

    - name: Stop and remove existing container (if any)
      shell: |
        docker stop {{ container_name }} 2>/dev/null || true
        docker rm {{ container_name }} 2>/dev/null || true
      tags: [deploy]

    - name: Start CoinbaseChain container
      shell: |
        docker run -d \
          --name {{ container_name }} \
          --restart unless-stopped \
          -p {{ p2p_port }}:{{ p2p_port }} \
          -v {{ docker_data_dir }}:/home/coinbasechain/.coinbasechain \
          -e COINBASECHAIN_NETWORK={{ coinbasechain_network }} \
          -e COINBASECHAIN_PORT={{ p2p_port }} \
          -e COINBASECHAIN_LISTEN=1 \
          -e COINBASECHAIN_SERVER=1 \
          -e COINBASECHAIN_THREADS=2 \
          -e COINBASECHAIN_MAXCONNECTIONS=10 \
          coinbasechain:latest
      tags: [deploy]

    - name: Wait for container to start
      pause:
        seconds: 10
      tags: [deploy]

    - name: Check container status
      shell: docker ps -f name={{ container_name }} --format "\{\{.Names\}\}\t\{\{.Status\}\}\t\{\{.Ports\}\}"
      register: container_status
      tags: [deploy, info]

    - name: Display container status
      debug:
        msg: "{{ container_status.stdout_lines }}"
      tags: [deploy, info]

    # =========================================================================
    # 4. Establish peer connections (mesh network)
    # =========================================================================
    - name: Wait for containers to be ready for connections
      pause:
        seconds: 10
      run_once: true
      tags: [deploy, network]

    - name: Establish peer connections
      shell: |
        {% for host in groups['coinbasechain_nodes'] %}
        {% if host != inventory_hostname %}
        docker exec {{ container_name }} coinbasechain-cli addnode {{ hostvars[host]['ansible_host'] }}:{{ hostvars[host]['p2p_port'] }} add 2>&1 | grep -q "success" || true
        {% endif %}
        {% endfor %}
      register: peer_connections
      tags: [deploy, network]

    - name: Check connection count
      shell: docker exec {{ container_name }} coinbasechain-cli getconnectioncount
      register: connection_count
      tags: [deploy, network, verify]

    - name: Display connection count
      debug:
        msg: "Node {{ inventory_hostname }} has {{ connection_count.stdout }} peer connections"
      tags: [deploy, network, verify]

    - name: Wait for nodes to stabilize
      pause:
        seconds: 15
      run_once: true
      tags: [deploy, verify]

    - name: Run deployment verification
      local_action:
        module: shell
        cmd: bash {{ playbook_dir }}/scripts/verify-deployment.sh
      run_once: true
      register: verification_result
      ignore_errors: yes
      tags: [deploy, verify]

    - name: Display verification results
      debug:
        msg: "{{ verification_result.stdout_lines | default(['Verification script failed - manual check required']) }}"
      run_once: true
      when: verification_result is defined
      tags: [deploy, verify]

    # =========================================================================
    # 5. Display final summary
    # =========================================================================
    - name: Get blockchain info
      shell: docker exec {{ container_name }} coinbasechain-cli getblockchaininfo 2>&1 | grep -E '"chain"|"blocks"' | head -2
      register: blockchain_info
      ignore_errors: yes
      tags: [deploy, summary]

    - name: Final deployment summary
      debug:
        msg:
          - "=========================================="
          - " CoinbaseChain Deployment Complete"
          - "=========================================="
          - " Node: {{ inventory_hostname }} ({{ ansible_host }})"
          - " Network: {{ coinbasechain_network }}"
          - " Container: {{ container_name }}"
          - " P2P Port: {{ p2p_port }}"
          - " Data Dir: {{ docker_data_dir }}"
          - " Peer Connections: {{ connection_count.stdout | default('N/A') }}"
          - " Blockchain Info:"
          - "{{ blockchain_info.stdout_lines | default(['  Not available']) | join('\n') }}"
          - "=========================================="
      tags: [deploy, summary]
