/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/vector:1394:10: runtime error: addition of unsigned offset to 0x6020005846f0 overflowed to 0x6020005846e8
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/vector:1394:10 in 
=================================================================
==12571==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020005846e8 at pc 0x00010180ffec bp 0x00016f1bd610 sp 0x00016f1bd608
READ of size 8 at 0x6020005846e8 thread T0
    #0 0x10180ffe8 in coinbasechain::chain::CChain::SetTip(coinbasechain::chain::CBlockIndex&) chain.cpp:26
    #1 0x1018224ac in coinbasechain::chain::BlockManager::Load(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, uint256 const&) block_manager.cpp:547
    #2 0x1012794f8 in CATCH2_INTERNAL_TEST_13() block_manager_defensive_tests.cpp:290
    #3 0x100cb8284 in Catch::RunContext::invokeActiveTestCase() catch_amalgamated.cpp:5967
    #4 0x100cae24c in Catch::RunContext::runCurrentTest(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&) catch_amalgamated.cpp:5930
    #5 0x100cab88c in Catch::RunContext::runTest(Catch::TestCaseHandle const&) catch_amalgamated.cpp:5652
    #6 0x100c6c380 in Catch::(anonymous namespace)::TestGroup::execute() catch_amalgamated.cpp:1241
    #7 0x100c67814 in Catch::Session::runInternal() catch_amalgamated.cpp:1463
    #8 0x100c658ec in Catch::Session::run() catch_amalgamated.cpp:1394
    #9 0x100c9ebf0 in main catch_amalgamated.cpp:4787
    #10 0x18a3e8270  (<unknown module>)

0x6020005846e8 is located 8 bytes before 16-byte region [0x6020005846f0,0x602000584700)
allocated by thread T0 here:
    #0 0x103943e94 in _Znwm+0x74 (libclang_rt.asan_osx_dynamic.dylib:arm64e+0x63e94)
    #1 0x101270dc4 in std::__1::__split_buffer<coinbasechain::chain::CBlockIndex*, std::__1::allocator<coinbasechain::chain::CBlockIndex*>&>::__split_buffer(unsigned long, unsigned long, std::__1::allocator<coinbasechain::chain::CBlockIndex*>&) __split_buffer:343
    #2 0x101812a70 in std::__1::vector<coinbasechain::chain::CBlockIndex*, std::__1::allocator<coinbasechain::chain::CBlockIndex*>>::__append(unsigned long) vector:1095
    #3 0x10180f410 in coinbasechain::chain::CChain::SetTip(coinbasechain::chain::CBlockIndex&) chain.cpp:22
    #4 0x1018224ac in coinbasechain::chain::BlockManager::Load(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, uint256 const&) block_manager.cpp:547
    #5 0x1012794f8 in CATCH2_INTERNAL_TEST_13() block_manager_defensive_tests.cpp:290
    #6 0x100cb8284 in Catch::RunContext::invokeActiveTestCase() catch_amalgamated.cpp:5967
    #7 0x100cae24c in Catch::RunContext::runCurrentTest(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&) catch_amalgamated.cpp:5930
    #8 0x100cab88c in Catch::RunContext::runTest(Catch::TestCaseHandle const&) catch_amalgamated.cpp:5652
    #9 0x100c6c380 in Catch::(anonymous namespace)::TestGroup::execute() catch_amalgamated.cpp:1241
    #10 0x100c67814 in Catch::Session::runInternal() catch_amalgamated.cpp:1463
    #11 0x100c658ec in Catch::Session::run() catch_amalgamated.cpp:1394
    #12 0x100c9ebf0 in main catch_amalgamated.cpp:4787
    #13 0x18a3e8270  (<unknown module>)

SUMMARY: AddressSanitizer: heap-buffer-overflow chain.cpp:26 in coinbasechain::chain::CChain::SetTip(coinbasechain::chain::CBlockIndex&)
Shadow bytes around the buggy address:
  0x602000584400: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa
  0x602000584480: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa
  0x602000584500: fa fa fd fa fa fa fd fd fa fa fd fa fa fa fd fa
  0x602000584580: fa fa fd fa fa fa fd fd fa fa fd fa fa fa fd fa
  0x602000584600: fa fa fd fa fa fa fd fa fa fa fd fa fa fa 00 00
=>0x602000584680: fa fa fd fa fa fa fd fa fa fa fd fa fa[fa]00 00
  0x602000584700: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa
  0x602000584780: fa fa fd fa fa fa fa fa fa fa fd fa fa fa fd fa
  0x602000584800: fa fa fd fa fa fa fa fa fa fa fd fa fa fa fd fa
  0x602000584880: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fa fa
  0x602000584900: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==12571==ABORTING
